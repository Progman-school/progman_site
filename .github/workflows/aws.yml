name: Deploy to Amazon ECS

on:
  push:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Check dump GitHub context
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
      run: echo "$GITHUB_CONTEXT"

    - name: Use composer
      run: |
        composer install

    - name: Create env file
      run: |
        touch .env
        echo APP_KEY=$(php artisan key:generate --force --show) >> .env
        echo APP_DEBUG=true >> .env
        echo DB_CONNECTION=mysql >> .env
        echo OLD_DB_HOST=${{ secrets.OLD_DB_HOST }} >> .env
        echo OLD_DB_USER=${{ secrets.OLD_DB_USER }} >> .env
        echo OLD_DB_PASSWORD=${{ secrets.OLD_DB_PASSWORD }} >> .env
        cat .env

    - name: Frontend building using npm
      run: |
        npm install
        npm run build

    - name: Generate deployment package
      run: zip -r deploy.zip . -x '*.git*' vendor

    - name: Beanstalk Deploy
      # You may pin to the exact commit or the version.
      # uses: einaregilsson/beanstalk-deploy@18e5b85bd914cabf00fccabe72f60b8757dcd3cb
      uses: einaregilsson/beanstalk-deploy@v21
      with:
        # AWS Access Key
        aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
        # AWS Secret Key
        aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        # AWS Region
        region: ${{ vars.MY_AWS_REGION }}
        # Beanstalk application name
        application_name: ${{ vars.AWS_EB_APP_NAME }}
        # Beanstalk environment name. If empty a version will be created but not deployed anywhere.
        environment_name: ${{ vars.AWS_EB_APP_ENV_NAME }}
        # Version label for new Beanstalk version
        version_label: ${{ github.event.head_commit.timestamp }}--${{ github.event.head_commit.id }}
        # Version description for the new Beanstalk version
        version_description: ${{ github.event.head_commit.message }}
        # Zip file with the version to deploy. If skipped the action will deploy existing version.
        deployment_package: deploy.zip

        # Whether the action should skip creating a new bucket and use the given one to upload the deployment package to instead. When omitted the actions will (try to) create a new one during deployment.
#         existing_bucket_name: # optional
        # If set to "true" then the action will deploy an existing version with the given version_label if it already exists, but otherwise create the version and deploy it. If set to true for an action with no environment name it will upload a version if it does not exist already, but do nothing if the version already exists.
#         use_existing_version_if_available: # optional
        # Whether the action should wait for the deployment to finish and log status messages during the wait. Default is "true". If set to "false" the action will start the deployment on Beanstalk and then exit.
#         wait_for_deployment: # optional
#         # How many seconds to wait for the environment to return to Green state after deployment is finished. Default is 30 seconds.
#         wait_for_environment_recovery: # optional
